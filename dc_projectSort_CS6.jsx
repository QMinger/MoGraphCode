// +++++// This script is designed to aid in the cleanup and collecting of large After Effects projects. This// Script moves all footage items (both imported and native) to a folder with subfolders for each type// of file in the project. If desired, this script can also move all compositions to a single folder.//// Additionally, this script provides utility to remove any empty folders which are often created by// the batch-movement of items. This function will remove all empty folders, not just folders now made// empty by the script.//// Usage:// To use this script, simply make your selections on the left side of the panel. If you would like to// sort both footage and compositions, choose both checkboxes. If you would only like to sort one type of// item and leave the other where they are, simply select the appropriate checkbox. Next, enter the names// of the new folders to be created, then simply press sort. To remove all empty folders after the sort// process has finished, leave the "Delete Empty Folders" box checked.//// The idea for this script came from a frustration due to the limitations of After Effects's collect// project function, in particular the character limits. Using this script will make for easy collecting// without fear of file paths that are too long.//// Thank you for using this script!// +++++// +++++// CHANGELOG:// 041414: Initial Script released.// 041514: Fix for projects with no extension but period in their path.// +++++// +++++//Copyright (c) 2014, David Conklin <dconklin09@gmail.com>// Permission to use, copy, modify, and/or distribute this software for any purpose with or without //fee is hereby granted, provided that the above copyright notice and this permission notice appear //in all copies.//THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE //INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE //FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM //LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, //ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.// +++++// +++++// This function contains the script and acts as a wrapper or container.// +++++function projectSort(thisObj){	// +++++	// Globals and Shortcuts	// +++++	var proj = app.project;	// +++++	// This function builds the main User Interface.	// Returns: The Window.	// +++++	function buildUI(thisObj){		var w = (thisObj instanceof Panel) ? thisObj : new Window("palette", "dc_projectSort", undefined);			w.orientation = "column";			w.alignChildren = ["fill", ""];		var mainGrp = w.add("group");			mainGrp.alignChildren = ["fill", "fill"];		//make the left-most group for checkboxes.		var checkboxGroup = mainGrp.add("group");			checkboxGroup.orientation = "column";			checkboxGroup.alignment = "left";			checkboxGroup.alignChildren = ["left", "fill"];			checkboxGroup.preferredSize = [130, "fill"]		var ftgCheckbox = checkboxGroup.add("checkbox", undefined, "Footage");			ftgCheckbox.value = 1;		var compCheckbox = checkboxGroup.add("checkbox", undefined, "Compositions")			compCheckbox.value = 1;		//make the inputs for folder names		var folderNameGroup = mainGrp.add("group")			folderNameGroup.orientation = "column";			folderNameGroup.alignment = "left";			folderNameGroup.alignChildren = ["left", "fill"];			folderNameGroup.preferredSize = [310, "fill"];							var ftgGrp = folderNameGroup.add("group");		var ftgFolderHelp =	ftgGrp.add("statictext", undefined, "Footage Folder:");		var ftgFolder = ftgGrp.add("edittext", undefined, "Footage");			ftgFolder.characters = 36;			ftgFolder.active = 1;				var cmpsGrp = folderNameGroup.add("group");		var compFolderHelp = cmpsGrp.add("statictext", undefined, "Compositions Folder:");		var compFolder = cmpsGrp.add("edittext", undefined, "Comps");			compFolder.characters = 32;			compFolder.active = 0;		//all the buttons		var btnHolderGrp = mainGrp.add("group")		//make the first row of buttons		var btnGrp1 = btnHolderGrp.add("group");			btnGrp1.orientation = "column";			btnGrp1.alignment = "right";			btnGrp1.alignChildren = ["right", "fill"];				var sortBtn = btnGrp1.add("button", undefined, "Sort");		var cancelBtn = btnGrp1.add("button", undefined, "Cancel", {name: "cancel"});		var btnGrp2 = btnHolderGrp.add("group");			btnGrp2.orientation = "column";			btnGrp2.alignment = "right";			btnGrp2.alignChildren = ["right", "fill"]		var helpBtn = btnGrp2.add("button", undefined, "Help");		var infoBtn = btnGrp2.add("button", undefined, "Info");		//a group for optional checkboxes.		var optionsGrp = w.add("group");			optionsGrp.alignment = "right";			optionsGrp.alignChildren = ["right", "fill"];			optionsGrp.add("statictext", undefined, "((  Please check info panel for progress after beginning sort.   ))");		var delFolders = optionsGrp.add("checkbox", undefined, "Remove Empty Folders");			delFolders.value = 1;		//button functionality here.		sortBtn.onClick = function(){			deciderFunction(ftgCheckbox.value, ftgFolder.text, compCheckbox.value, compFolder.text, delFolders.value)		}		cancelBtn.onClick = function(){			w.close();		}		helpBtn.onClick = function(){			helpFunction();		}		infoBtn.onClick = function(){			infoFunction();		}		ftgCheckbox.onClick = function() {			if (ftgCheckbox.value == 0){				ftgFolder.enabled = false;			} else {				ftgFolder.enabled = true;			}		}		compCheckbox.onClick = function(){			if (compCheckbox.value == 0) {				compFolder.enabled = false;			} else {				compFolder.enabled = true;			}		}		return w;			} //end of suildUI function	// +++++	// Do the main file collection. Parse comps into a comp array and ftg into a ftg array for later use.	// Expects the input of both checkboxes..	// Returns a nested array with ftg in the first slot and comps in the next slot.	// +++++	function projectLookup(ftg, comps){		var ftgHold = [];		var compHold = [];		//loop through every item in the project.		for (var i = 1; i <= proj.items.length; i++){			var curItem = proj.item(i);			var curType = curItem.typeName;			//if this item is footage and the footage checkbox is 1.			if ((curType == "Footage") && (ftg == 1)) {				//put this item at the end of the ftgHold array.				ftgHold[ftgHold.length] = curItem;			} //end ftgCheck			//if this item is a composition and the comps checkbox is 1.			if ((curType == "Composition") && (comps == 1)) {				//place this item at the end of the compHold array.				compHold[compHold.length] = curItem;			} //end compCheck		} //end loop through project.		//create a nested array to hold the footage; feed all footage into first socket, comps into second. 		var results = [];			results[0] = ftgHold;			results[1] = compHold;		return results;	} //end projectLookup function.	// +++++	// Feed this function a path(string) and it returns the extension(string).	// +++++	function getExt(path){		//get the extension by looping backwards through string and looking for a period.		for (var p = path.length - 1; p > 0; p--){			//which character are we on?			var curChar = path.substr(p, 1);			//this character is a period?			if (curChar == ".") {				//found a period, stop. Return the characters after the period.				return path.slice(p + 1).toLowerCase();						} else { //this character is not a period.				//if we've looked past 4 characters.				if (p < (path.length - 4)) {										writeLn(path + " has no extension.");					//file has no extension, put it in an unsorted folder.					return ("_Unsorted (No Extension)");				}				//no period, continue.				continue;			} //end periodcheck else clause.		} //end loop through path.		} //end getExt function.	// +++++	// Feed this function an array of folders and a current extension and it will determine	// Whether or not that extension is the name of any of those folders.	// Inputs: An array of folders and an extension (string).	// Outputs: folder if match, null if no match.	// +++++	function folderCheck(folders, ext){		var folderChecker = null;		//if folders does exist.		if (folders != null){					//loop through folders			for (var z = 0; z < folders.length; z++){				//if name of folder and extension match				if (folders[z].name == ext) {					//make folder checker (which will be returned) the folder.										folderChecker = folders[z];								} else { //if extension and folder don't match.										//continue loop.					continue;								} // end if				} //end for loop		}		//return either the folder if one was found, or null if one was not.		return folderChecker;	}	// ++++	// This function sorts all footage items.	// It expects an array of all footage items and the name of the folder to place them in.	// Returns: Nothing	// +++++	function sortFtg(ftgItems, ftgFolderName){		if (ftgItems.length > 0){			//make a new folder for sorted footage file.			var ftgFolder = proj.items.addFolder(ftgFolderName);		}		//make some holder variables.		var solidsFolder;		var folderList = [];		var pathsHolder = [];				//loop through all footage items		for (var f = 0; f < ftgItems.length; f++){			clearOutput();			writeLn("Sorting ftg item " + f + " of " + ftgItems.length);			//does the current item have a source? (Is it something imported, or something made by AE?)			if (ftgItems[f].mainSource.file == undefined) {				//if the item doesn't have a source.				//does a solids folder exist?				if (solidsFolder == undefined){					//if there is no solids folder, make one under the footage folder and add it to the var.					solidsFolder = proj.items.addFolder("Solids");					solidsFolder.parentFolder = ftgFolder;				} 				//add solid to solids folder;				ftgItems[f].parentFolder = solidsFolder;			} else { //if the current item has a source				//get the source				var curSrc = ftgItems[f].mainSource.file;				var curSrcString = String(curSrc);				//define var for current extension.				var curExt;				//is this footage missing?				if (ftgItems[f].footageMissing == false) {					//footage isn't missing. Run path through ext.					curExt = getExt(curSrcString);								} else { //footage is missing					//missing footage. Use "Missing".					curExt = "_missing";				}				//run folder checker and parse into a variable.				var folderCheckRes = folderCheck(folderList, curExt);				//if no folder was found				if (folderCheckRes == null) {					//make folder;					var newFolder = proj.items.addFolder(curExt);					//put this folder in footage folder					newFolder.parentFolder = ftgFolder;					//make a new folder and add it to folder list;					folderList[folderList.length] = newFolder;					//add item to new folder.					ftgItems[f].parentFolder = newFolder;					//clear newFolder					var newFolder = null;				} else { //if a folder was found.					//add folder to the folder returned by folderCheck() function.					ftgItems[f].parentFolder = folderCheckRes;				} //end if folder was found else clause			} //end sourcecheck else clause			//perform clears.			curSrc = null;			curSrcString = null;			curExt = null;			folderCheckRes = null;		} //end loop through all footage items.	} //end sortFtg function	// +++++	// A function to sort the compositions.	// Expects an array of compositions and a name(string) for a folder to put them in.	// Returns: Nothing.	// +++++	function sortComps(compItems, compFolderName){		if (compItems.length > 0){			//make a new folder for the comps.			var compFolder = proj.items.addFolder(compFolderName);		}				//loop through comps.		for (var c = 0; c < compItems.length; c++) {			clearOutput();			writeLn("Sorting comp " + c + " of " + compItems.length);			//add all comps to comp Folder.			compItems[c].parentFolder = compFolder;		}	} //end sortComps function	// +++++	// Decider function. This comp decides what to do when the sort button is pressed.	// It takes all the main inputs of the panel in order to pass them to the next functions.	// Returns: Nothing	// +++++	function deciderFunction(ftgChk, ftgFldNm, cmpChk, cmpFldNm, remove){			app.beginUndoGroup("dc_projectSort");		//run project lookup.		var lookupRes = projectLookup(ftgChk, cmpChk);		//if we're dealing with footage.		if(ftgChk == 1){			sortFtg(lookupRes[0], ftgFldNm);		} 		if(cmpChk == 1) {			sortComps(lookupRes[1], cmpFldNm);		}		if((cmpChk == 0) && (ftgChk == 0)){			alert("Please choose to sort either compositions or footage items.");		}		if (remove == 1) {			folderCleanup();		}		clearOutput();		writeLn("dc_projectSort finished.");		writeLn("You may undo if you wish.")		//alert("Finished cleanup. Thank you for using this script!");		app.endUndoGroup();	} //end decider function	// +++++ 	// This function will remove folders with nothing in them.	// Inputs: None.	// Outputs: None.	// +++++	function folderCleanup(){		var folderHolder = [];		//loop through whole project.		for (var d = 1; d <= proj.items.length; d++){			var curLook = proj.item(d);						//is this item a folder			if (curLook.typeName == "Folder") {				//if folder and has nothin in it, add it to the holder.				folderHolder[folderHolder.length] = curLook;			} else { //not a folder.								continue;						}		}		for (var n = folderHolder.length - 1; n >= 0; n--) {			clearOutput();			writeLn("Checking folder " + (folderHolder.length - n) + " of " + folderHolder.length);			if (folderHolder[n].numItems == 0) {								folderHolder[n].remove();			} 		}		folderHolder = null;	}	// +++++	// Runs a box when you press the help button	// +++++	function helpFunction(){		alert("This script facilitates the organization and clean up of After Effects projects.\n\nTo use this script, simply make your selections on the left side of the panel. If you would like to sort both footage and compositions, choose both checkboxes. If you would only like to sort one type of item and leave the other where they are, simply select the appropriate checkbox.\n\nNext, enter the names of the new folders to be created, then simply press sort. To remove all empty folders after the sort process has finished, leave the \"Delete Empty Folders\" box checked.\n\nThank you for using this script!")	}	// +++++	// Runs an alert when you press the info button.	// +++++	function infoFunction(){		alert("Thank you for using this script!\n\nThis script is designed to aid in the cleanup and collecting of large After Effects projects. ThisScript moves all footage items (both imported and native) to a folder with subfolders for each typeof file in the project. If desired, this script can also move all compositions to a single folder.\n\nAdditionally, this script provides utility to remove any empty folders which are often created bythe batch-movement of items. This function will remove all empty folders, not just folders now madeempty by the script.\n\nThe idea for this script came from a frustration due to the limitations of After Effects\'s collectproject function, in particular the character limits. Using this script will make for easy collectingwithout fear of file paths that are too long.\n\n\n\nLEGAL STUFF:\n\nCopyright (c) 2014, David Conklin <dconklin09@gmail.com> Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.")	}	//parse the UI build into a var.	var uiHolder = buildUI();	//show the window if it's a window (not launched from the Scripts UI folder).	if (uiHolder instanceof Window) {		uiHolder.show();	}}//call the main logic of the script.projectSort(this);